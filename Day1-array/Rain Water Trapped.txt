Question : Given a vector A of non-negative integers representing 
           an elevation map where the width of each bar is 1,
           compute how much water it is able to trap after raining.
          eg : A = [0, 1, 0, 2]
          ans : 1
          explaination: only we can store water at index 2 of height 1 so the area = 1


solution 1: To find the loads of water on each index we have to find the maximum bar from the left 
            and maximum bar from the right and will consider minimum bar of both .
            and we have to calculate the area of that ith index and subtract the area of it.
            and for result we have to add up all the areas.

            Code:
                def find_container_water(arr):
                    if len(arr)<=1:
                        return 0
                    res=0
                    for i in range(1,len(arr)):
                        left_max=-1
                        right_max=-1
                        for left in range(0,i):
                            if arr[left]>arr[i]:
                                left_max=arr[left]
                                break
                        for right in range(i+1,len(arr)):
                            if arr[right]>arr[i]:
                                right_max = arr[right]
                                break
                        area = min(left_max,right_max)*1
                        res+=area-(arr[i]*1)
                    return res
            Time complexity = O(n2)
            Space complexity = O(1)

solution 2:
           In above approach we are calculating max part every time rather than we can pre-compute
           it and store it in a list.
           Code :
                def find_container_water(arr):
                    res=0
                    if len(arr)<=1:
                    return 0
                    left_array=[0]*len(arr)
                    right_array=[0]*len(arr)
                    for left in range(1,len(arr)):
                        left_array[left]=max(arr[left],left_arrayleft-1])
                    for right in range(len(arr)-1,-1,-1):
                        right_array[right]=max(arr[right],right_array[right-1])
                    for i in range(len(arr)):
                        res=min(left_array[i],right_array[i])*1-(arr[i]*1)
                    return res
            
            Time Compexity:O(n)
            Space Compexity:O(n)


                  

           