Question:   Set Matrix Zeros
              Problem Statements
Given a matrix, A of size M x N of 0s and 1s. If an element is 0, set its entire row and column to 0.

Note: This will be evaluated on the extra memory used. Try to minimize the space and time complexity.



Input Format:

The first and the only argument of input contains a 2-d integer matrix, A, of size M x N.
Output Format:

Return a 2-d matrix that satisfies the given conditions.
Constraints:

1 <= N, M <= 1000
0 <= A[i][j] <= 1
Examples:

Input 1:
    [   [1, 0, 1],
        [1, 1, 1], 
        [1, 1, 1]   ]

Output 1:
    [   [0, 0, 0],
        [1, 0, 1],
        [1, 0, 1]   ]

Input 2:
    [   [1, 0, 1],
        [1, 1, 1],
        [1, 0, 1]   ]

Output 2:
    [   [0, 0, 0],
        [1, 0, 1],
        [0, 0, 0]   ]

Solution 1: 
          first we take an 2D-matrix (name=res) of same size and assign a value 1 to whole matrix.
          1) i will traverse on matrix cell by cell .
          2) if i found zero at any cell then will update zeros in same row and in same column.
          3) Return the matrix res

        Code:
            def zero_matrix(M):
                if len(M)<1:
                    return "matrix is empty"
                
                res = [[0] * len(M[0]) for i in range(len(M))]
        
                for row in range(len(M)):
                   for col in range(len(M[0])):
                      if M[row][col]==0:
                         for insert_row in range(len(M)):
                            res[insert_row][col]=0
                         for insert_col in range(len(M)):
                            res[row][insert_col]=0
                return res

            Time Complexity:O(N*M*(N+M))
            Space Compexity : O(N*M)

Solution 2: 
           In Above approach we can observe we are updating same row and same columns multiple time 
           so here we can improve complexity.
           1) so store some where row and column seperately and remove all the duplicate rows and columns.
           2)or we can store in set data structure it has property to contains unique elements.
           
           Code:
                def zero_matrix(M):
                    set_rows=set()
                    set_col=set()
                    for row in range(len(M)):
                        for col in range(len(M[0])):
                           if M[row][col]==0:
                               set_row.add(row)
                               set_col.add(col)
                               break
                    for row in set_row:
                        for col in range(len(M[0])):
                            M[row][col]=0

                    for col in set_col:
                        for row in range(len(M)):
                            M[row][col]=0
                    return M
            Time Compexity:O(N*M)
            Space Compexity:O(N+M)
            
                            
                    
                            