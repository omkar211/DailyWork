Question: Maximum Consecutive Gap
       
        Problem Description

Given an unsorted integer array A of size N.
Find the maximum difference between the successive elements in its sorted form.

Try to solve it in linear time/space.

You may assume that all the elements in the array are non-negative integers and fit in 
the 32-bit signed integer range.
You may also assume that the difference will not overflow.
Return 0 if the array contains less than 2 elements.



Problem Constraints
1 <= N <= 106

1 <= A[i] <= 109



Input Format
First argument is an integer array A of size N.



Output Format
Return an integer denoting the maximum difference.



Example Input
Input 1:

 A = [1, 10, 5]
Input 2:

 A = [10, 9, 10]


Example Output
Output 1:

 5
Output 2:

 1


Example Explanation
Explanation 1:

 After sorting, the array becomes [1, 5, 10]
 Maximum difference is (10 - 5) = 5.
Explanation 2:

 Maximum difference is (10 - 9) = 1.

Corner Cases: does it contain duplicate entry?

Solution 1 : 
            pick a ith index element  and find the just lesser element and just greater element from i-1 to 0
            and from i+1 to length og array -1 and repeat same process for every index.
            
            Code:
                def max_consecuive_gap(A):
                    res=0
                    if len(A)<=1:
                       return 0
                    for i in range(len(A)-1):
                        just_min=float('inf)
                        enter_in_loop=False
                            for j in range(i+1,len(A)):
                                if A[j]>A[i] and A[j]<just_min:
                                    just_min=A[j]
                                    enter_in_loop = True
                        if enter_in_loop:
                            res=max(res,just_min-A[i])
                    return res
        
        Time complexity : O(N)
        Space complexity : O(1)

                                
                        
