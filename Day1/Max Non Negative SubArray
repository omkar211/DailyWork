Question:   Max Non Negative SubArray

              Problem Statement
Given an array of integers, A of length N, find out the maximum sum sub-array of non negative numbers from A.
The sub-array should be contiguous i.e., a sub-array created by choosing the second and fourth element and skipping the third element is invalid.
Maximum sub-array is defined in terms of the sum of the elements in the sub-array.
Find and return the required subarray.

NOTE:

    1. If there is a tie, then compare with segment's length and return segment which has maximum length.
    2. If there is still a tie, then return the segment with minimum starting index.

Input Format:

The first and the only argument of input contains an integer array A, of length N.
Output Format:
Return an array of integers, that is a subarray of A that satisfies the given conditions.
Constraints:

1 <= N <= 1e5
-INT_MAX < A[i] <= INT_MAX
Examples:
Input 1:
    A = [1, 2, 5, -7, 2, 3]

Output 1:
    [1, 2, 5]

Explanation 1:
    The two sub-arrays are [1, 2, 5] [2, 3].
    The answer is [1, 2, 5] as its sum is larger than [2, 3].

Input 2:
    A = [10, -1, 2, 3, -4, 100]
Output 2:
    [100]

Explanation 2:
    The three sub-arrays are [10], [2, 3], [100].
    The answer is [100] as its sum is larger than the other two.



Solution : first i will start from index 0 and traverse the whole arrary till last.
           simultaneously store the sum of contiguous postive elements and its starting index and last postive element index ,whenever i get negative element i will skip it and start it from very next element and store the sum in another variable and  also update starting and ending indexes and at every move i will compare the sum and take the global result and update the index according to given conditions .
           Code:
               def positive_sum(arr):
                    n=len(arr)
                    sum1=0
                    sum2=0
                    first_start = -1
                    first_end = -1
                    second_start = 0
                    second_end = 0
                    for i in range(len(arr)):
                        sum2+=arr[i]
                        second_end = i
                        if arr[i]<0 and i<n:
                            sum2=0
                            second_start= i+1
                            continue
                        if sum2==sum1:
                            if (second_start-second_end)>(first_end-first_start):
                                first_start =second_start
                                first_end=second_end
                        elif sum2>sum1:
                            first_start =second_start
                            first_end=second_end
                            sum1=sum2
                        
                    if sum2==sum1:
                        if (second_start-second_end)>(first_end-first_start):
                            first_start =second_start
                            first_end=second_end
                            
                    elif sum2>sum1:
                        first_start =second_start
                        first_end=second_end
                    return [first_start,first_end]

                    print(positive_sum([1,2,3,4,5,90,-3,6,7,8]))

            Time Comlexity : O(N)
            Space Complexity : O(1)
                            
